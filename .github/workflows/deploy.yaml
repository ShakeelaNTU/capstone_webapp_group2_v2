name: Deploy Flask Web App

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Select environment"
        required: true
        type: choice
        options:
          - staging

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Debug Secrets and Variables
      run: |
        echo "Checking Secrets and Variables..."
        echo "S3_BUCKET=${{ secrets.S3_BUCKET }}"
        echo "TF_OUTPUT_PATH=${{ secrets.TF_OUTPUT_PATH }}"

    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: Download Terraform Outputs from S3
      run: |
        aws s3 cp s3://${{ secrets.S3_BUCKET }}/${{ secrets.TF_OUTPUT_PATH }} tf_outputs.json
        ls -lah  # Debugging step to check if the file exists

    - name: Extract Terraform Outputs
      run: |
        ECS_CLUSTER=$(jq -r '.ecs_cluster_name.value' tf_outputs.json)
        TASK_DEF=$(jq -r '.ecs_task_family.value' tf_outputs.json)
        ECS_SERVICE=$(jq -r '.ecs_service_name.value' tf_outputs.json)
        CONTAINER_NAME=$(jq -r '.container_name.value' tf_outputs.json)
        ECR_REPOSITORY=$(jq -r '.ecr_repository.value' tf_outputs.json)

        echo "ECS_CLUSTER=$ECS_CLUSTER" >> $GITHUB_ENV
        echo "TASK_DEF=$TASK_DEF" >> $GITHUB_ENV
        echo "ECS_SERVICE=$ECS_SERVICE" >> $GITHUB_ENV
        echo "CONTAINER_NAME=$CONTAINER_NAME" >> $GITHUB_ENV
        echo "ECR_REPOSITORY=$ECR_REPOSITORY" >> $GITHUB_ENV

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and push Docker image to Amazon ECR
      id: build-image
      uses: docker/build-push-action@v6
      with:
        context: ./flask-webapp-service
        push: true
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:${{ github.sha }}
          ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:latest
        platforms: linux/amd64
        provenance: false

    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition $TASK_DEF --query taskDefinition > task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: $CONTAINER_NAME
        image: ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:${{ github.sha }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: $ECS_SERVICE
        cluster: $ECS_CLUSTER
        wait-for-service-stability: true
