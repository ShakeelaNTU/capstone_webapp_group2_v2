name: Deploy Flask Web App

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Select environment"
        required: true
        type: choice
        options:
          - staging

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Debug Secrets and Variables
      run: |
        echo "Checking Secrets and Variables..."
        echo "S3_BUCKET=${{ secrets.S3_BUCKET }}"
        echo "TF_OUTPUT_PATH=${{ secrets.TF_OUTPUT_PATH }}"

    - name: Download Terraform Outputs from S3
      run: |
        aws s3 cp s3://${{ secrets.S3_BUCKET }}/${{ secrets.TF_OUTPUT_PATH }} tf_outputs.txt
        ls -lah  # Debugging step to check if the file exists

    - name: Extract Terraform Outputs
      run: |
        # Filter only key-value lines and clean unwanted characters
        grep ' = ' tf_outputs.txt | grep -v '::debug::' | grep -v 'command' | grep -v 'exitcode' | grep -v 'stderr' > cleaned_tf_outputs.txt

        # Read values into variables
        ECS_CLUSTER=$(awk -F ' = ' '/ecs_cluster_name/ {print $2}' cleaned_tf_outputs.txt | tr -d '"')
        TASK_DEF=$(awk -F ' = ' '/ecs_task_family/ {print $2}' cleaned_tf_outputs.txt | tr -d '"')
        ECS_SERVICE=$(awk -F ' = ' '/ecs_service_name/ {print $2}' cleaned_tf_outputs.txt | tr -d '"')
        CONTAINER_NAME=$(awk -F ' = ' '/container_name/ {print $2}' cleaned_tf_outputs.txt | tr -d '"')
        DYNAMODB_TABLE=$(awk -F ' = ' '/dynamodb_table_name/ {print $2}' cleaned_tf_outputs.txt | tr -d '"')
        ECR_REPOSITORY=$(awk -F ' = ' '/ecr_repository/ {print $2}' cleaned_tf_outputs.txt | tr -d '"')

        # Validate extracted values
        echo "Extracted values:"
        echo "ECS_CLUSTER=$ECS_CLUSTER"
        echo "TASK_DEF=$TASK_DEF"
        echo "ECS_SERVICE=$ECS_SERVICE"
        echo "CONTAINER_NAME=$CONTAINER_NAME"
        echo "DYNAMODB_TABLE=$DYNAMODB_TABLE"
        echo "ECR_REPOSITORY=$ECR_REPOSITORY"

        # Ensure all variables have been set correctly
        if [[ -z "$ECS_CLUSTER" || -z "$TASK_DEF" || -z "$ECS_SERVICE" || -z "$CONTAINER_NAME" || -z "$DYNAMODB_TABLE" || -z "$ECR_REPOSITORY" ]]; then
          echo "Error: Missing required values from Terraform output"
          exit 1
        fi

        # Save to GitHub Environment Variables
        echo "ECS_CLUSTER=$ECS_CLUSTER" >> $GITHUB_ENV
        echo "TASK_DEF=$TASK_DEF" >> $GITHUB_ENV
        echo "ECS_SERVICE=$ECS_SERVICE" >> $GITHUB_ENV
        echo "CONTAINER_NAME=$CONTAINER_NAME" >> $GITHUB_ENV
        echo "DYNAMODB_TABLE=$DYNAMODB_TABLE" >> $GITHUB_ENV
        echo "ECR_REPOSITORY=$ECR_REPOSITORY" >> $GITHUB_ENV

    - name: Debug ECR_REPOSITORY
      run: echo "ECR_REPOSITORY is ${{ env.ECR_REPOSITORY }}"

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and Push Docker Image to Amazon ECR
      id: build-image
      uses: docker/build-push-action@v6
      with:
        context: ./flask-webapp-service
        push: true
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
        platforms: linux/amd64
        provenance: false

    - name: Download Task Definition
      run: |
        aws ecs describe-task-definition --task-definition $TASK_DEF --query taskDefinition > task-definition.json

    - name: Update ECS Task Definition with New Image
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: $CONTAINER_NAME
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest

    - name: Deploy Amazon ECS Task Definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: $ECS_SERVICE
        cluster: $ECS_CLUSTER
        wait-for-service-stability: true
